import logging
import time
import random
import openai
from telegram import Update
from telegram.ext import Updater, CommandHandler, MessageHandler, Filters, CallbackContext
from config import BOT_TOKEN, OPENAI_API_KEY

# === –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è ===
logging.basicConfig(
    format='%(asctime)s - %(levelname)s - %(message)s',
    level=logging.INFO,
    handlers=[
        logging.FileHandler("bot.log"),
        logging.StreamHandler()
    ]
)

logger = logging.getLogger(__name__)

# === OpenAI API ===
openai.api_key = OPENAI_API_KEY

# === –•—Ä–∞–Ω–∏–ª–∏—â–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è ===
attempts = {}
completed_users = set()

# === –§–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –∫–æ–º–ø–ª—ñ–º–µ–Ω—Ç–∏ (–Ω–∞ —Å–ª—É—á–∞–π –æ—à–∏–±–∫–∏) ===
FALLBACK_COMPLIMENTS = [
    "üå∏ –¢–≤–æ—è —É—Å–º—ñ—à–∫–∞ ‚Äî –º–æ—î –Ω–∞—Ç—Ö–Ω–µ–Ω–Ω—è.",
    "‚ú® –¢–∏ —Ä–æ–±–∏—à —Ü–µ–π —Å–≤—ñ—Ç –∫—Ä–∞—â–∏–º –ø—Ä–æ—Å—Ç–æ —Å–≤–æ—î—é –ø—Ä–∏—Å—É—Ç–Ω—ñ—Å—Ç—é.",
    "üí´ –ö–æ–∂–Ω–∞ –º–∏—Ç—å –∑ —Ç–æ–±–æ—é ‚Äî —Å–ø—Ä–∞–≤–∂–Ω—ñ–π –ø–æ–¥–∞—Ä—É–Ω–æ–∫.",
    "üå∑ –Ø –Ω–∞–π—â–∞—Å–ª–∏–≤—ñ—à–∏–π, —â–æ —Ç–∏ ‚Äî –º–æ—è.",
    "ü¶ã –¢–≤–æ—ó –æ—á—ñ —è—Å–∫—Ä–∞–≤—ñ—à—ñ –∑–∞ –≤—Å—ñ –∑—ñ—Ä–∫–∏.",
    "üåπ –¢–∏ ‚Äî –º–æ—è –ª—é–±–æ–≤, –º–æ—î —Å–µ—Ä—Ü–µ, –º–æ—î –≤—Å–µ.",
    "üéÄ –Ø –∫–æ—Ö–∞—é —Ç–µ–±–µ —â–µ –±—ñ–ª—å—à–µ, –Ω—ñ–∂ —É—á–æ—Ä–∞.",
    "üíñ –¢–∏ ‚Äî –Ω–∞–π–∫—Ä–∞—â–µ, —â–æ –∑—ñ –º–Ω–æ—é —Å—Ç–∞–ª–æ—Å—è.",
]

# === –ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä –∫–æ–º–ø–ª—ñ–º–µ–Ω—Ç—ñ–≤ —á–µ—Ä–µ–∑ OpenAI ===
def generate_compliment():
    logger.info("–í—ã–∑–æ–≤: generate_compliment()")
    try:
        response = openai.ChatCompletion.create(
            model="gpt-4o",
            messages=[
                {
                    "role": "system",
                    "content": (
                        "–¢–∏ —Ä–æ–º–∞–Ω—Ç–∏—á–Ω–∏–π –∞—Å–∏—Å—Ç–µ–Ω—Ç. –ó–≥–µ–Ω–µ—Ä—É–π –æ–¥–Ω–µ –∫–æ—Ä–æ—Ç–∫–µ, —â–∏—Ä–µ —ñ –∫—Ä–∞—Å–∏–≤–µ —Ä–µ—á–µ–Ω–Ω—è-–∫–æ–º–ø–ª—ñ–º–µ–Ω—Ç "
                        "—É–∫—Ä–∞—ó–Ω—Å—å–∫–æ—é –º–æ–≤–æ—é, —è–∫ –¥–ª—è –∫–æ—Ö–∞–Ω–æ—ó –ª—é–¥–∏–Ω–∏. "
                        "–ü–æ—á–∏–Ω–∞–π —Ä–µ—á–µ–Ω–Ω—è –∑ –≤—ñ–¥–ø–æ–≤—ñ–¥–Ω–æ–≥–æ –µ–º–æ–¥–∑—ñ ‚Äî –∫–≤—ñ—Ç–∫–∞, —Å–µ—Ä—Ü–µ –∞–±–æ –∑–æ—Ä—è. –õ–∏—à–µ –æ–¥–∏–Ω —Ä—è–¥–æ–∫ –±–µ–∑ –∑–∞–π–≤–æ–≥–æ."
                    )
                },
                {
                    "role": "user",
                    "content": "–ö–æ–º–ø–ª—ñ–º–µ–Ω—Ç –¥–ª—è –Ω–µ—ó"
                }
            ],
            temperature=0.9,
            max_tokens=50
        )
        return response.choices[0].message.content.strip()
    except Exception as e:
        logger.warning(f"OpenAI error: {e}")
        return random.choice(FALLBACK_COMPLIMENTS)

# === –ù–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è –≤–≤–æ–¥–∞ ===
def normalize_input(text):
    logger.info(f"–í—ã–∑–æ–≤: normalize_input('{text}')")
    text = text.lower()
    lat_to_cyr = {
        'a': '–∞', 'b': '–≤', 'c': '—Å', 'e': '–µ', 'h': '–Ω',
        'i': '—ñ', 'k': '–∫', 'm': '–º', 'o': '–æ', 'p': '—Ä',
        't': '—Ç', 'x': '—Ö', 'y': '—É'
    }
    text = ''.join(lat_to_cyr.get(ch, ch) for ch in text)
    allowed = set("–∞–±–≤–≥–¥–µ—î–∂–∑–∏–π–∫–ª–º–Ω–æ–ø—Ä—Å—Ç—É—Ñ—Ö—Ü—á—à—â—å—é—è—ñ—ó“ë0123456789")
    return ''.join(ch for ch in text if ch in allowed)

# === –î–æ–ø—É—Å—Ç–∏–º—ñ –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ ===
VALID_ANSWERS = {normalize_input(x) for x in [
    "853",
    "260051",
    "1-–Ω–æ 260051",
    "1–Ω–æ260051"
]}

# === –ö–æ–º–∞–Ω–¥–∞ /start ===
def start(update: Update, context: CallbackContext):
    logger.info(f"–í—ã–∑–æ–≤: start() –æ—Ç chat_id={update.effective_chat.id}")
    chat_id = update.effective_chat.id

    context.bot.send_message(
        chat_id=chat_id,
        text="üíñ –¢–∏ ‚Äî –Ω–∞–π–∫—Ä–∞—Å–∏–≤—ñ—à–∞, –Ω–∞–π—Ä–æ–∑—É–º–Ω—ñ—à–∞ —Ç–∞ –Ω–∞–π—á—É–¥–æ–≤—ñ—à–∞ –∂—ñ–Ω–∫–∞ —É —Å–≤—ñ—Ç—ñ.\n\n–Ü —Ü–µ–π –∫–≤–µ—Å—Ç —Å—Ç–≤–æ—Ä–µ–Ω–æ –ª–∏—à–µ –¥–ª—è —Ç–µ–±–µ üåü"
    )

    time.sleep(5)

    context.bot.send_message(
        chat_id=chat_id,
        text="üß© –ü–µ—Ä—à–∏–π –µ—Ç–∞–ø:\n\n–í–≤–µ–¥–∏ —á–∏—Å–ª–æ, —â–æ –∑–±–µ—Ä—ñ–≥–∞—î —Å–∏–ª—É –Ω–∞—à–æ—ó –æ–±—ñ—Ü—è–Ω–∫–∏, –∑–∞—Ñ—ñ–∫—Å–æ–≤–∞–Ω–æ—ó –≤ —Ç–æ–π –¥–µ–Ω—å, –∫–æ–ª–∏ –º–∏ —Å—Ç–∞–ª–∏ –æ–¥–Ω—ñ—î—é —Ä–æ–¥–∏–Ω–æ—é."
    )

# === –û–±—Ä–æ–±–∫–∞ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å ===
def check_number(update: Update, context: CallbackContext):
    chat_id = update.effective_chat.id
    user_input = normalize_input(update.message.text.strip())
    logger.info(f"–í—ã–∑–æ–≤: check_number() –≤—ñ–¥ chat_id={chat_id} | –í–≤–µ–¥–µ–Ω–æ: {user_input}")

    if chat_id in completed_users:
        compliment = generate_compliment()
        context.bot.send_message(chat_id=chat_id, text=compliment)
        return

    if user_input in VALID_ANSWERS:
        completed_users.add(chat_id)
        context.bot.send_message(
            chat_id=chat_id,
            text="‚úÖ –í—ñ—Ä–Ω–æ! –ê –æ—Å—å —ñ —Ç–≤–æ—è –Ω–∞—Å—Ç—É–ø–Ω–∞ –ø—ñ–¥–∫–∞–∑–∫–∞:\n\nüìç –ó–∞–∑–∏—Ä–Ω–∏ —Ç—É–¥–∏, –¥–µ –º–∏ –≤–ø–µ—Ä—à–µ —Å–∫–∞–∑–∞–ª–∏ '—è —Ç–µ–±–µ –∫–æ—Ö–∞—é' ‚ù§Ô∏è"
        )
        return

    attempts[chat_id] = attempts.get(chat_id, 0) + 1

    if attempts[chat_id] == 2:
        context.bot.send_message(
            chat_id=chat_id,
            text="‚ùó –ú–∞–ª–µ–Ω—å–∫–∞ –ø—ñ–¥–∫–∞–∑–∫–∞:\n–¶–µ —à–µ—Å—Ç–∏–∑–Ω–∞—á–Ω–µ —á–∏—Å–ª–æ –∑ –Ω–∞—à–æ–≥–æ —Å–≤—ñ–¥–æ—Ü—Ç–≤–∞ –ø—Ä–æ –æ–¥—Ä—É–∂–µ–Ω–Ω—è üíç"
        )

    context.bot.send_message(
        chat_id=chat_id,
        text="‚ùå –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–∏–π –Ω–æ–º–µ—Ä. –°–ø—Ä–æ–±—É–π —â–µ —Ä–∞–∑ üïµÔ∏è"
    )

# === –¢–æ—á–∫–∞ –≤—Ö–æ–¥—É ===
def main():
    logger.info("–ë–æ—Ç –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è...")
    updater = Updater(BOT_TOKEN, use_context=True)
    dp = updater.dispatcher

    dp.add_handler(CommandHandler("start", start))
    dp.add_handler(MessageHandler(Filters.text & ~Filters.command, check_number))

    updater.start_polling()
    updater.idle()

if __name__ == '__main__':
    main()
