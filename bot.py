import logging
import time
import random
from pathlib import Path
import openai
from telegram import Update, InputFile
from telegram.ext import Updater, CommandHandler, MessageHandler, Filters, CallbackContext
from config import BOT_TOKEN, OPENAI_API_KEY
from config import VALID_ANSWER_RAW_LIST


# === –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è ===
logging.basicConfig(
    format='%(asctime)s - %(levelname)s - %(message)s',
    level=logging.INFO,
    handlers=[
        logging.FileHandler("bot.log"),
        logging.StreamHandler()
    ]
)

logger = logging.getLogger(__name__)

# === OpenAI API ===
openai.api_key = OPENAI_API_KEY

# === –•—Ä–∞–Ω–∏–ª–∏—â–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è ===
attempts = {}
completed_users = set()

# === –§–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –∫–æ–º–ø–ª—ñ–º–µ–Ω—Ç–∏ (–Ω–∞ —Å–ª—É—á–∞–π –æ—à–∏–±–∫–∏) ===
FALLBACK_COMPLIMENTS = [
    "üå∏ –¢–≤–æ—è —É—Å–º—ñ—à–∫–∞ ‚Äî –º–æ—î –Ω–∞—Ç—Ö–Ω–µ–Ω–Ω—è.",
    "‚ú® –¢–∏ —Ä–æ–±–∏—à —Ü–µ–π —Å–≤—ñ—Ç –∫—Ä–∞—â–∏–º –ø—Ä–æ—Å—Ç–æ —Å–≤–æ—î—é –ø—Ä–∏—Å—É—Ç–Ω—ñ—Å—Ç—é.",
    "üí´ –ö–æ–∂–Ω–∞ –º–∏—Ç—å –∑ —Ç–æ–±–æ—é ‚Äî —Å–ø—Ä–∞–≤–∂–Ω—ñ–π –ø–æ–¥–∞—Ä—É–Ω–æ–∫.",
    "üå∑ –Ø –Ω–∞–π—â–∞—Å–ª–∏–≤—ñ—à–∏–π, —â–æ —Ç–∏ ‚Äî –º–æ—è.",
    "ü¶ã –¢–≤–æ—ó –æ—á—ñ —è—Å–∫—Ä–∞–≤—ñ—à—ñ –∑–∞ –≤—Å—ñ –∑—ñ—Ä–∫–∏.",
    "üåπ –¢–∏ ‚Äî –º–æ—è –ª—é–±–æ–≤, –º–æ—î —Å–µ—Ä—Ü–µ, –º–æ—î –≤—Å–µ.",
    "üéÄ –Ø –∫–æ—Ö–∞—é —Ç–µ–±–µ —â–µ –±—ñ–ª—å—à–µ, –Ω—ñ–∂ —É—á–æ—Ä–∞.",
    "üíñ –¢–∏ ‚Äî –Ω–∞–π–∫—Ä–∞—â–µ, —â–æ –∑—ñ –º–Ω–æ—é —Å—Ç–∞–ª–æ—Å—è.",
]

def generate_greeting() -> str:
    logger.info("–í—ã–∑–æ–≤: generate_greeting()")
    try:
        response = openai.ChatCompletion.create(
            model="gpt-4o",
            messages=[
                {
                    "role": "system",
                    "content": (
                        "–¢–∏ —Ä–æ–º–∞–Ω—Ç–∏—á–Ω–∏–π –∫–≤–µ—Å—Ç-–∞—Å–∏—Å—Ç–µ–Ω—Ç. –ó–≥–µ–Ω–µ—Ä—É–π —Ç–µ–ø–ª–µ, —â–∏—Ä–µ –π –µ–º–æ—Ü—ñ–π–Ω–µ –≤—ñ—Ç–∞–Ω–Ω—è "
                        "—É–∫—Ä–∞—ó–Ω—Å—å–∫–æ—é –º–æ–≤–æ—é –¥–ª—è –∫–æ—Ö–∞–Ω–æ—ó –∂—ñ–Ω–∫–∏. "
                        "–î–æ–¥–∞–π –µ–º–æ—Ü—ñ—ó, —Ç—Ä–æ—Ö–∏ –≥—É–º–æ—Ä—É, –µ–º–æ–¥–∑—ñ (–∞–ª–µ –Ω–µ –±—ñ–ª—å—à–µ 4). "
                        "–ü—Ä–∏–≤—ñ—Ç–∞–Ω–Ω—è –º–∞—î –±—É—Ç–∏ –¥–æ–≤—à–∏–º –∑–∞ 1 —Ä–µ—á–µ–Ω–Ω—è. –ó–∞–≤–µ—Ä—à ‚Äî —â–æ —Ü–µ–π –∫–≤–µ—Å—Ç —Å—Ç–≤–æ—Ä–µ–Ω–∏–π –ª–∏—à–µ –¥–ª—è –Ω–µ—ó."
                    )
                },
                {
                    "role": "user",
                    "content": "–ó–≥–µ–Ω–µ—Ä—É–π –≤—ñ—Ç–∞–Ω–Ω—è –¥–ª—è –∫–≤–µ—Å—Ç—É."
                }
            ],
            temperature=0.95,
            max_tokens=150
        )
        return response.choices[0].message.content.strip()
    except Exception as e:
        logger.warning(f"OpenAI error (greeting): {e}")
        return (
            "üíñ –¢–∏ ‚Äî –Ω–∞–π–∫—Ä–∞—Å–∏–≤—ñ—à–∞, –Ω–∞–π—Ä–æ–∑—É–º–Ω—ñ—à–∞ —Ç–∞ –Ω–∞–π—á—É–¥–æ–≤—ñ—à–∞ –∂—ñ–Ω–∫–∞ —É –≤—Å—å–æ–º—É –í—Å–µ—Å–≤—ñ—Ç—ñ! "
            "–¢–≤–æ—ó –æ—á—ñ ‚Äî –º—ñ–π –∫–æ—Å–º–æ—Å, –∞ —É—Å–º—ñ—à–∫–∞ ‚Äî –º–æ—î —Å–æ–Ω—Ü–µ ‚òÄÔ∏è "
            "–¶–µ–π –∫–≤–µ—Å—Ç ‚Äî –º–∞–ª–µ–Ω—å–∫–∏–π –ø–æ–¥–∞—Ä—É–Ω–æ–∫, —Å—Ç–≤–æ—Ä–µ–Ω–∏–π –ª–∏—à–µ –¥–ª—è —Ç–µ–±–µ üå∏"
        )



# === –ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä –∫–æ–º–ø–ª—ñ–º–µ–Ω—Ç—ñ–≤ —á–µ—Ä–µ–∑ OpenAI ===
def generate_compliment():
    logger.info("–í—ã–∑–æ–≤: generate_compliment()")
    try:
        response = openai.ChatCompletion.create(
            model="gpt-4o",
            messages=[
                {
                    "role": "system",
                    "content": (
                        "–¢–∏ —Ä–æ–º–∞–Ω—Ç–∏—á–Ω–∏–π –∞—Å–∏—Å—Ç–µ–Ω—Ç. –ó–≥–µ–Ω–µ—Ä—É–π –æ–¥–Ω–µ –∫–æ—Ä–æ—Ç–∫–µ, —â–∏—Ä–µ —ñ –∫—Ä–∞—Å–∏–≤–µ —Ä–µ—á–µ–Ω–Ω—è-–∫–æ–º–ø–ª—ñ–º–µ–Ω—Ç "
                        "—É–∫—Ä–∞—ó–Ω—Å—å–∫–æ—é –º–æ–≤–æ—é, —è–∫ –¥–ª—è –∫–æ—Ö–∞–Ω–æ—ó –ª—é–¥–∏–Ω–∏. "
                        "–ü–æ—á–∏–Ω–∞–π —Ä–µ—á–µ–Ω–Ω—è –∑ –≤—ñ–¥–ø–æ–≤—ñ–¥–Ω–æ–≥–æ –µ–º–æ–¥–∑—ñ ‚Äî –∫–≤—ñ—Ç–∫–∞, —Å–µ—Ä—Ü–µ –∞–±–æ –∑–æ—Ä—è. –õ–∏—à–µ –æ–¥–∏–Ω —Ä—è–¥–æ–∫ –±–µ–∑ –∑–∞–π–≤–æ–≥–æ."
                    )
                },
                {
                    "role": "user",
                    "content": "–ö–æ–º–ø–ª—ñ–º–µ–Ω—Ç –¥–ª—è –Ω–µ—ó"
                }
            ],
            temperature=0.9,
            max_tokens=50
        )
        return response.choices[0].message.content.strip()
    except Exception as e:
        logger.warning(f"OpenAI error: {e}")
        return random.choice(FALLBACK_COMPLIMENTS)


#–§—É–Ω–∫—Ü–∏—è –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç–≤–µ—Ç–∞ –Ω–∞ –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –≤–≤–æ–¥
def generate_wrong_answer_response(attempt_count: int = 1) -> str:
    logger.info("–í—ã–∑–æ–≤: generate_wrong_answer_response()")
    try:
        hint_part = (
            "–î–∞–π –Ω–µ–≤–µ–ª–∏–∫—É –∑–∞–≥–∞–¥–∫–æ–≤—É –ø—ñ–¥–∫–∞–∑–∫—É, —è–∫–∞ –Ω–∞—Ç—è–∫–∞—î, —â–æ —Ü–µ –Ω–æ–º–µ—Ä –∑—ñ —Å–≤—ñ–¥–æ—Ü—Ç–≤–∞ –ø—Ä–æ –æ–¥—Ä—É–∂–µ–Ω–Ω—è."
            if attempt_count >= 2 else
            "–ü–æ–∫–∏ –±–µ–∑ –ø—ñ–¥–∫–∞–∑–∫–∏. –ü—Ä–æ—Å—Ç–æ —Å–∫–∞–∂–∏, —â–æ —Ü–µ –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–∞ –≤—ñ–¥–ø–æ–≤—ñ–¥—å, –∞–ª–µ –ª–∞–≥—ñ–¥–Ω–æ –π –∂–∞—Ä—Ç—ñ–≤–ª–∏–≤–æ."
        )

        response = openai.ChatCompletion.create(
            model="gpt-4o",
            messages=[
                {
                    "role": "system",
                    "content": (
                        "–¢–∏ —Ä–æ–º–∞–Ω—Ç–∏—á–Ω–∏–π –ø–æ–º—ñ—á–Ω–∏–∫ —É –∫–≤–µ—Å—Ç—ñ –¥–ª—è –∫–æ—Ö–∞–Ω–æ—ó –∂—ñ–Ω–∫–∏. "
                        "–ö–æ–ª–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á –≤–≤–æ–¥–∏—Ç—å –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—É –≤—ñ–¥–ø–æ–≤—ñ–¥—å, "
                        "–≤—ñ–¥–ø–æ–≤—ñ–¥–∞–π –æ–¥–Ω–∏–º —Ä—è–¥–∫–æ–º, –Ω—ñ–∂–Ω–æ, –∑ –≥—É–º–æ—Ä–æ–º –∞–±–æ –µ–º–æ–¥–∑—ñ —É–∫—Ä–∞—ó–Ω—Å—å–∫–æ—é –º–æ–≤–æ—é. "
                        f"{hint_part} –ù—ñ–∫–æ–ª–∏ –Ω–µ –ø–æ–∫–∞–∑—É–π —Ç–æ—á–Ω—É –≤—ñ–¥–ø–æ–≤—ñ–¥—å."
                    )
                },
                {
                    "role": "user",
                    "content": "–©–æ —Å–∫–∞–∑–∞—Ç–∏ –Ω–∞ –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—É –≤—ñ–¥–ø–æ–≤—ñ–¥—å?"
                }
            ],
            temperature=0.95,
            max_tokens=60
        )
        return response.choices[0].message.content.strip()
    except Exception as e:
        logger.warning(f"OpenAI error (wrong answer): {e}")
        return random.choice([
            "‚ùå –ù—ñ, –Ω–µ —Ç–∞–∫ üòÖ –ê–ª–µ –Ω–µ –∑–¥–∞–≤–∞–π—Å—è!",
            "üôà –¶–µ —â–µ –Ω–µ —Ç–µ. –°–ø—Ä–æ–±—É–π –∑–Ω–æ–≤—É!",
            "üßê –©–æ—Å—å –Ω–µ —Å—Ö–æ–¥–∏—Ç—å—Å—è... –∞–ª–µ —Ç–∏ –±–ª–∏–∑—å–∫–æ!",
            "ü§î –¶—ñ–∫–∞–≤–æ... –∞–ª–µ –Ω—ñ. –ü–æ–¥—É–º–∞–π —â–µ!"
        ])


# === –ù–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è –≤–≤–æ–¥–∞ ===
def normalize_input(text):
    logger.info(f"–í—ã–∑–æ–≤: normalize_input('{text}')")
    text = text.lower()
    lat_to_cyr = {
        'a': '–∞', 'b': '–≤', 'c': '—Å', 'e': '–µ', 'h': '–Ω',
        'i': '—ñ', 'k': '–∫', 'm': '–º', 'o': '–æ', 'p': '—Ä',
        't': '—Ç', 'x': '—Ö', 'y': '—É'
    }
    text = ''.join(lat_to_cyr.get(ch, ch) for ch in text)
    allowed = set("–∞–±–≤–≥–¥–µ—î–∂–∑–∏–π–∫–ª–º–Ω–æ–ø—Ä—Å—Ç—É—Ñ—Ö—Ü—á—à—â—å—é—è—ñ—ó“ë0123456789")
    return ''.join(ch for ch in text if ch in allowed)

VALID_ANSWERS = {normalize_input(x) for x in VALID_ANSWER_RAW_LIST}

# === –ö–æ–º–∞–Ω–¥–∞ /start ===
def start(update: Update, context: CallbackContext):
    logger.info(f"–í—ã–∑–æ–≤: start() –æ—Ç chat_id={update.effective_chat.id}")
    chat_id = update.effective_chat.id

    completed_users.discard(chat_id)  # —Å–±—Ä–∞—Å—ã–≤–∞–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å –¥–ª—è —ç—Ç–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    attempts.pop(chat_id, None)       # —Å–±—Ä–∞—Å—ã–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫ –ø–æ–ø—ã—Ç–æ–∫
    context.user_data.clear()
    context.chat_data.clear()

    greeting = generate_greeting()
    context.bot.send_message(chat_id=chat_id, text=greeting)

    time.sleep(5)

    context.bot.send_message(
        chat_id=chat_id,
        text="üß©–í–≤–µ–¥–∏ —á–∏—Å–ª–æ, —â–æ –∑–±–µ—Ä—ñ–≥–∞—î —Å–∏–ª—É –Ω–∞—à–æ—ó –æ–±—ñ—Ü—è–Ω–∫–∏, –∑–∞—Ñ—ñ–∫—Å–æ–≤–∞–Ω–æ—ó –≤ —Ç–æ–π –¥–µ–Ω—å, –∫–æ–ª–∏ –º–∏ —Å—Ç–∞–ª–∏ –æ–¥–Ω—ñ—î—é —Ä–æ–¥–∏–Ω–æ—é."
    )

# === –û–±—Ä–æ–±–∫–∞ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å ===
def check_number(update: Update, context: CallbackContext):
    chat_id = update.effective_chat.id
    user_input = normalize_input(update.message.text.strip())
    logger.info(f"–í—ã–∑–æ–≤: check_number() –≤—ñ–¥ chat_id={chat_id} | –í–≤–µ–¥–µ–Ω–æ: {user_input}")

    if chat_id in completed_users:
        compliment = generate_compliment()
        context.bot.send_message(chat_id=chat_id, text=compliment)
        return

    if user_input in VALID_ANSWERS:
        completed_users.add(chat_id)
        context.bot.send_message(
            chat_id=chat_id,
            text="–í—ñ—Ä–Ω–æ! –ê –Ω–∞—Å—Ç—É–ø–Ω–µ –≤—ñ–¥–µ–æ –ø—ñ–¥–∫–∞–∂–µ —Ç–æ–±—ñ –¥–µ —à—É–∫–∞—Ç–∏ –¥–∞–ª—ñ ;-)"
        )
        time.sleep(5)
        video_path = Path(__file__).resolve().parent.parent / "output.avi"
        with open(video_path, "rb") as video:
            context.bot.send_video(
                chat_id=chat_id,
                video=InputFile(video, filename="output.avi"),
                supports_streaming=True,
            )
        return

    attempts[chat_id] = attempts.get(chat_id, 0) + 1

    if attempts[chat_id] == 10:
        context.bot.send_message(
            chat_id=chat_id,
            text="‚ùó –ú–∞–ª–µ–Ω—å–∫–∞ –ø—ñ–¥–∫–∞–∑–∫–∞:\n–¶–µ —à–µ—Å—Ç–∏–∑–Ω–∞—á–Ω–µ —á–∏—Å–ª–æ –∑ –Ω–∞—à–æ–≥–æ —Å–≤—ñ–¥–æ—Ü—Ç–≤–∞ –ø—Ä–æ –æ–¥—Ä—É–∂–µ–Ω–Ω—è üíç"
        )

    wrong_text = generate_wrong_answer_response(attempts[chat_id])
    context.bot.send_message(chat_id=chat_id, text=wrong_text)
    

# === –¢–æ—á–∫–∞ –≤—Ö–æ–¥—É ===
def main():
    logger.info("–ë–æ—Ç –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è...")
    updater = Updater(BOT_TOKEN, use_context=True)
    dp = updater.dispatcher

    dp.add_handler(CommandHandler("start", start))
    dp.add_handler(MessageHandler(Filters.text & ~Filters.command, check_number))

    updater.start_polling()
    updater.idle()

if __name__ == '__main__':
    main()
